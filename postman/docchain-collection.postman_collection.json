{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "DocChain Microservices Collection",
		"description": "Complete API collection for DocChain project with User and Document microservices.\n\n## Architecture Overview\n- **User Service**: Port 8081 - User management and document orchestration\n- **Document Service**: Port 8082 - Document management\n\n## Communication Flow\nUser Service → Document Service (via RestClient)\n\n## Technologies\n- Spring Boot 3.5\n- Java 21\n- PostgreSQL\n- Eureka Discovery",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Service",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"user_id\", jsonData.id);",
									"    pm.test(\"User created successfully\", function () {",
									"        pm.expect(jsonData.id).to.exist;",
									"        pm.expect(jsonData.fullName).to.exist;",
									"        pm.expect(jsonData.email).to.exist;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fullName\": \"João Silva\",\n    \"email\": \"joao.silva@example.com\"\n}"
						},
						"url": {
							"raw": "{{user_service_url}}/users",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Creates a new user in the system.\n\n**Request Body:**\n- `fullName` (string, required): Full name of the user\n- `email` (string, required): Valid email address\n\n**Response:**\nReturns the created User entity with:\n- `id` (UUID): Auto-generated user ID\n- `fullName` (string)\n- `email` (Email VO)\n- `createdAt` (timestamp)\n- `documents` (array): Empty list of document IDs"
					},
					"response": [
						{
							"name": "Success - User Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"Maria Santos\",\n    \"email\": \"maria.santos@example.com\"\n}"
								},
								"url": {
									"raw": "{{user_service_url}}/users",
									"host": [
										"{{user_service_url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"username\": null,\n    \"fullName\": \"Maria Santos\",\n    \"email\": {\n        \"value\": \"maria.santos@example.com\"\n    },\n    \"passwordHash\": null,\n    \"createdAt\": \"2025-10-18T14:30:00\",\n    \"documents\": []\n}"
						},
						{
							"name": "Validation Error - Missing Fields",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"\"\n}"
								},
								"url": {
									"raw": "{{user_service_url}}/users",
									"host": [
										"{{user_service_url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-10-18T14:30:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"message\": \"Validation failed\",\n    \"errors\": [\n        {\n            \"field\": \"fullName\",\n            \"message\": \"must not be blank\"\n        },\n        {\n            \"field\": \"email\",\n            \"message\": \"must not be blank\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Create Document for User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"document_id\", jsonData.id);",
									"    pm.test(\"Document created for user\", function () {",
									"        pm.expect(jsonData.id).to.exist;",
									"        pm.expect(jsonData.title).to.exist;",
									"        pm.expect(jsonData.ownerId).to.exist;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure user_id is set",
									"if (!pm.environment.get(\"user_id\")) {",
									"    console.log(\"⚠️ Warning: user_id not found. Please create a user first.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Contrato de Prestação de Serviços\",\n    \"content\": \"Este contrato estabelece os termos e condições para prestação de serviços...\"\n}"
						},
						"url": {
							"raw": "{{user_service_url}}/users/{{user_id}}/documents",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"documents"
							]
						},
						"description": "Creates a document for a specific user. This endpoint orchestrates the communication between User and Document services.\n\n**Flow:**\n1. User Service receives the request\n2. Validates that user exists\n3. Calls Document Service via RestClient\n4. Returns the created document response\n\n**Path Parameters:**\n- `userId` (UUID): ID of the user who will own the document\n\n**Request Body:**\n- `title` (string, required): Document title\n- `content` (string, required): Document content\n\n**Response:**\nReturns DocumentResponseDto:\n- `id` (UUID): Document ID\n- `title` (string)\n- `content` (string)\n- `ownerId` (UUID): User ID\n- `status` (string): Document status (CREATED)\n- `createdAt` (timestamp)"
					},
					"response": [
						{
							"name": "Success - Document Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Proposta Comercial 2025\",\n    \"content\": \"Proposta para fornecimento de software...\"\n}"
								},
								"url": {
									"raw": "{{user_service_url}}/users/550e8400-e29b-41d4-a716-446655440000/documents",
									"host": [
										"{{user_service_url}}"
									],
									"path": [
										"users",
										"550e8400-e29b-41d4-a716-446655440000",
										"documents"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"7c9e6679-7425-40de-944b-e07fc1f90ae7\",\n    \"title\": \"Proposta Comercial 2025\",\n    \"content\": \"Proposta para fornecimento de software...\",\n    \"ownerId\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"status\": \"CREATED\",\n    \"createdAt\": \"2025-10-18T15:45:30+00:00\"\n}"
						},
						{
							"name": "Error - User Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Test Document\",\n    \"content\": \"Content\"\n}"
								},
								"url": {
									"raw": "{{user_service_url}}/users/99999999-9999-9999-9999-999999999999/documents",
									"host": [
										"{{user_service_url}}"
									],
									"path": [
										"users",
										"99999999-9999-9999-9999-999999999999",
										"documents"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-10-18T15:50:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"message\": \"User not found with id: 99999999-9999-9999-9999-999999999999\"\n}"
						},
						{
							"name": "Validation Error - Missing Fields",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"\"\n}"
								},
								"url": {
									"raw": "{{user_service_url}}/users/550e8400-e29b-41d4-a716-446655440000/documents",
									"host": [
										"{{user_service_url}}"
									],
									"path": [
										"users",
										"550e8400-e29b-41d4-a716-446655440000",
										"documents"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-10-18T15:52:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"message\": \"Validation failed\",\n    \"errors\": [\n        {\n            \"field\": \"title\",\n            \"message\": \"must not be blank\"\n        },\n        {\n            \"field\": \"content\",\n            \"message\": \"must not be blank\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"description": "User Service endpoints running on port 8081.\n\n**Base URL:** http://localhost:8081\n\n**Features:**\n- User registration\n- Document creation orchestration (calls Document Service)\n- User-Document relationship management"
		},
		{
			"name": "Document Service",
			"item": [
				{
					"name": "Create Document (Direct)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"document_id\", jsonData.id);",
									"    pm.test(\"Document created successfully\", function () {",
									"        pm.expect(jsonData.id).to.exist;",
									"        pm.expect(jsonData.title).to.exist;",
									"        pm.expect(jsonData.status).to.eql(\"CREATED\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Manual do Usuário\",\n    \"content\": \"Este manual contém instruções detalhadas sobre como utilizar o sistema...\",\n    \"ownerId\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
						},
						"url": {
							"raw": "{{document_service_url}}/api/v1/documents",
							"host": [
								"{{document_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"documents"
							]
						},
						"description": "Creates a document directly in the Document Service.\n\n⚠️ **Note:** This endpoint is typically called by User Service, but can be used directly for testing or administrative purposes.\n\n**Request Body:**\n- `title` (string, required): Document title\n- `content` (string, required): Document content/body\n- `ownerId` (UUID, required): User ID who owns this document\n\n**Response:**\nReturns the complete Document entity:\n- `id` (UUID): Auto-generated document ID\n- `fileName` (string, nullable)\n- `title` (string)\n- `content` (string)\n- `ownerId` (UUID)\n- `status` (enum): CREATED, DRAFT, PUBLISHED, etc.\n- `privacyStatus` (enum, nullable)\n- `createdAt` (timestamp)\n- `updatedAt` (timestamp, nullable)\n- `format` (string, nullable)\n- `version` (integer): Document version number"
					},
					"response": [
						{
							"name": "Success - Document Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Relatório Financeiro Q4 2025\",\n    \"content\": \"Análise detalhada dos resultados financeiros do quarto trimestre...\",\n    \"ownerId\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
								},
								"url": {
									"raw": "{{document_service_url}}/api/v1/documents",
									"host": [
										"{{document_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"documents"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"9b2c3f4a-1234-5678-90ab-cdef12345678\",\n    \"fileName\": null,\n    \"title\": \"Relatório Financeiro Q4 2025\",\n    \"content\": \"Análise detalhada dos resultados financeiros do quarto trimestre...\",\n    \"ownerId\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"status\": \"CREATED\",\n    \"privacyStatus\": null,\n    \"createdAt\": \"2025-10-18T16:20:45+00:00\",\n    \"updatedAt\": null,\n    \"format\": null,\n    \"version\": 0\n}"
						},
						{
							"name": "Error - Missing Owner ID",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Test Document\",\n    \"content\": \"Some content\"\n}"
								},
								"url": {
									"raw": "{{document_service_url}}/api/v1/documents",
									"host": [
										"{{document_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"documents"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2025-10-18T16:25:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"message\": \"Owner ID must be set to create a document.\"\n}"
						}
					]
				}
			],
			"description": "Document Service endpoints running on port 8082.\n\n**Base URL:** http://localhost:8082\n\n**Features:**\n- Document creation and management\n- Document versioning\n- Status tracking (CREATED, DRAFT, PUBLISHED)\n- Privacy controls\n\n**Note:** This service is typically consumed by User Service, but can be accessed directly for administrative or testing purposes."
		},
		{
			"name": "Integration Examples",
			"item": [
				{
					"name": "Full Flow - Create User and Document",
					"item": [
						{
							"name": "Step 1 - Create User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201) {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"integration_user_id\", jsonData.id);",
											"    pm.test(\"✅ Step 1: User created\", function () {",
											"        pm.expect(jsonData.id).to.exist;",
											"    });",
											"    console.log(\"✅ User ID:\", jsonData.id);",
											"    console.log(\"➡️ Next: Create document for this user\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"Carlos Eduardo\",\n    \"email\": \"carlos.eduardo@docchain.com\"\n}"
								},
								"url": {
									"raw": "{{user_service_url}}/users",
									"host": [
										"{{user_service_url}}"
									],
									"path": [
										"users"
									]
								},
								"description": "**Integration Flow - Step 1**\n\nCreate a new user that will be used in the complete flow."
							},
							"response": []
						},
						{
							"name": "Step 2 - Create Document via User Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201) {",
											"    var jsonData = pm.response.json();",
											"    pm.test(\"✅ Step 2: Document created via User Service\", function () {",
											"        pm.expect(jsonData.id).to.exist;",
											"        pm.expect(jsonData.ownerId).to.eql(pm.environment.get(\"integration_user_id\"));",
											"    });",
											"    console.log(\"✅ Document ID:\", jsonData.id);",
											"    console.log(\"✅ Owner ID:\", jsonData.ownerId);",
											"    console.log(\"✅ Integration flow completed successfully!\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var userId = pm.environment.get(\"integration_user_id\");",
											"if (!userId) {",
											"    console.error(\"❌ Error: User ID not found. Please run Step 1 first.\");",
											"} else {",
											"    console.log(\"➡️ Using User ID:\", userId);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Documento de Integração - Teste Completo\",\n    \"content\": \"Este documento foi criado através do fluxo completo de integração entre User Service e Document Service.\"\n}"
								},
								"url": {
									"raw": "{{user_service_url}}/users/{{integration_user_id}}/documents",
									"host": [
										"{{user_service_url}}"
									],
									"path": [
										"users",
										"{{integration_user_id}}",
										"documents"
									]
								},
								"description": "**Integration Flow - Step 2**\n\nCreate a document for the user created in Step 1.\n\n**What happens:**\n1. User Service receives the request\n2. Validates user exists\n3. Calls Document Service (http://localhost:8082/api/v1/documents)\n4. Document Service creates the document\n5. User Service returns the response"
							},
							"response": []
						}
					],
					"description": "Complete integration flow demonstrating microservices communication.\n\n**Flow:**\n1. Create User → User Service\n2. Create Document for User → User Service → Document Service\n\n**Purpose:**\nDemonstrate how User Service orchestrates document creation by calling Document Service via RestClient."
				},
				{
					"name": "Microservices Communication Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User Service is accessible\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response contains document data\", function () {",
									"        pm.expect(jsonData).to.have.property('id');",
									"        pm.expect(jsonData).to.have.property('title');",
									"        pm.expect(jsonData).to.have.property('ownerId');",
									"        pm.expect(jsonData).to.have.property('status');",
									"    });",
									"    ",
									"    pm.test(\"Document was created in Document Service\", function () {",
									"        pm.expect(jsonData.status).to.eql('CREATED');",
									"    });",
									"    ",
									"    pm.test(\"Microservices communication successful\", function () {",
									"        pm.expect(jsonData.ownerId).to.exist;",
									"    });",
									"    ",
									"    console.log(\"✅ Communication Test Results:\");",
									"    console.log(\"   📡 User Service → Document Service: SUCCESS\");",
									"    console.log(\"   📄 Document ID:\", jsonData.id);",
									"    console.log(\"   👤 Owner ID:\", jsonData.ownerId);",
									"    console.log(\"   📊 Status:\", jsonData.status);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Communication Test Document\",\n    \"content\": \"This document validates that User Service can successfully communicate with Document Service using RestClient.\"\n}"
						},
						"url": {
							"raw": "{{user_service_url}}/users/{{user_id}}/documents",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"documents"
							]
						},
						"description": "**Microservices Communication Test**\n\nThis request validates the complete communication flow:\n\n**Architecture:**\n```\nClient → User Service (8081) → Document Service (8082)\n         └─ RestClient\n         └─ HttpServiceProxyFactory\n         └─ DocumentServiceClient interface\n```\n\n**Test Validates:**\n- User Service is running and accessible\n- Document Service is running and accessible\n- RestClient configuration is correct\n- HTTP communication between services works\n- Data serialization/deserialization works\n- Response mapping is correct\n\n**Requirements:**\n- User Service running on port 8081\n- Document Service running on port 8082\n- Valid user_id in environment variables\n- PostgreSQL databases configured and running"
					},
					"response": []
				}
			],
			"description": "Real-world integration examples demonstrating microservices communication patterns.\n\n**Patterns Demonstrated:**\n1. **Service Orchestration**: User Service orchestrates Document creation\n2. **HTTP Client Communication**: RestClient with declarative interface\n3. **Error Propagation**: How errors flow between services\n4. **Data Transformation**: DTO mapping between services\n\n**Testing Tips:**\n- Run requests in sequence (Step 1 → Step 2)\n- Check console logs for detailed flow information\n- Verify environment variables are set correctly\n- Ensure both services are running"
		},
		{
			"name": "Health Checks",
			"item": [
				{
					"name": "User Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User Service is UP\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('UP');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}/actuator/health",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "Check if User Service is running and healthy.\n\n**Actuator endpoints enabled:**\n- Health\n- Info\n- Metrics (via Prometheus)"
					},
					"response": []
				},
				{
					"name": "Document Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Document Service is UP\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('UP');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{document_service_url}}/actuator/health",
							"host": [
								"{{document_service_url}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "Check if Document Service is running and healthy.\n\n**Actuator endpoints enabled:**\n- Health\n- Info\n- Metrics (via Prometheus)"
					},
					"response": []
				},
				{
					"name": "Eureka Discovery Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Eureka Server is UP\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8761",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8761"
						},
						"description": "Check Eureka Discovery Service status.\n\n**Registered Services:**\n- user-service\n- document-service\n\n**Note:** Services register with Eureka but use direct URLs for communication (not service discovery)."
					},
					"response": []
				}
			],
			"description": "Health check endpoints for all microservices.\n\n**Services:**\n- User Service: port 8081\n- Document Service: port 8082\n- Eureka Discovery: port 8761\n\n**Monitoring:**\nAll services expose Spring Boot Actuator endpoints for monitoring and observability."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('🚀 DocChain API Request');",
					"console.log('📍 Endpoint:', pm.request.url.toString());",
					"console.log('🔧 Method:', pm.request.method);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test(\"Response time is acceptable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test(\"Response has valid content type\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "user_service_url",
			"value": "http://localhost:8081",
			"type": "default"
		},
		{
			"key": "document_service_url",
			"value": "http://localhost:8082",
			"type": "default"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "default"
		},
		{
			"key": "document_id",
			"value": "",
			"type": "default"
		},
		{
			"key": "integration_user_id",
			"value": "",
			"type": "default"
		}
	]
}

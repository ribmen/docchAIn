
╔════════════════════════════════════════════════════════════════════════════╗
║                                                                            ║
║                      📮 DOCCHAIN API TESTING SUITE                         ║
║                                                                            ║
║              Complete Postman Collection & Testing Documentation           ║
║                                                                            ║
╚════════════════════════════════════════════════════════════════════════════╝

┌────────────────────────────────────────────────────────────────────────────┐
│  📦 FILES GENERATED                                                        │
└────────────────────────────────────────────────────────────────────────────┘

  ✅ docchain-collection.postman_collection.json
     → Complete Postman Collection with all endpoints, tests & examples

  ✅ docchain-environment.postman_environment.json  
     → Pre-configured environment variables for local development

  ✅ README_API_TESTS.md
     → Main documentation with overview, architecture & getting started

  ✅ POSTMAN_GUIDE.md
     → Complete Postman guide with detailed examples & troubleshooting

  ✅ CURL_EXAMPLES.md
     → cURL commands, Bash/PowerShell scripts & automation examples

  ✅ API_QUICK_REFERENCE.md
     → Cheat sheet with quick commands & common errors

  ✅ DOCUMENTATION_INDEX.md
     → Navigation guide to find information quickly


┌────────────────────────────────────────────────────────────────────────────┐
│  🚀 QUICK START                                                            │
└────────────────────────────────────────────────────────────────────────────┘

  OPTION 1: POSTMAN (Recommended)
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    1. Open Postman
    2. Import → docchain-collection.postman_collection.json
    3. Import → docchain-environment.postman_environment.json
    4. Select "DocChain - Local Development" environment
    5. Run: User Service → Create User

    📖 Full Guide: POSTMAN_GUIDE.md


  OPTION 2: cURL
  ━━━━━━━━━━━━━━

    # Create User
    curl -X POST http://localhost:8081/users \
      -H "Content-Type: application/json" \
      -d '{"fullName":"João Silva","email":"joao@example.com"}'

    📖 More Examples: CURL_EXAMPLES.md


┌────────────────────────────────────────────────────────────────────────────┐
│  🏗️  ARCHITECTURE                                                          │
└────────────────────────────────────────────────────────────────────────────┘

    ┌─────────────┐
    │   Client    │  (Postman, cURL, Browser)
    └──────┬──────┘
           │
           │ HTTP/REST
           │
    ┌──────▼────────────────────┐         ┌────────────────────────┐
    │  User Service (8081)      │────────→│ Document Service (8082)│
    │                           │         │                        │
    │  - User Management        │         │  - Document CRUD       │
    │  - Service Orchestration  │         │  - Status Management   │
    │  - RestClient (Imperative)│         │  - Versioning          │
    └───────────┬───────────────┘         └──────────┬─────────────┘
                │                                    │
                │                                    │
                ▼                                    ▼
        ┌───────────────┐                  ┌───────────────┐
        │  PostgreSQL   │                  │  PostgreSQL   │
        │ docchain_users│                  │docchain_docs  │
        └───────────────┘                  └───────────────┘


┌────────────────────────────────────────────────────────────────────────────┐
│  📍 ENDPOINTS                                                              │
└────────────────────────────────────────────────────────────────────────────┘

  USER SERVICE (http://localhost:8081)
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    POST   /users                       Create new user
    POST   /users/{id}/documents        Create document for user
    GET    /actuator/health             Health check


  DOCUMENT SERVICE (http://localhost:8082)
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    POST   /api/v1/documents            Create document (direct)
    GET    /actuator/health             Health check


┌────────────────────────────────────────────────────────────────────────────┐
│  ✨ FEATURES                                                               │
└────────────────────────────────────────────────────────────────────────────┘

  ✅ Complete Postman Collection
     • All endpoints documented
     • Request & response examples
     • Success & error scenarios

  ✅ Automatic Testing
     • Test scripts on every request
     • Validates responses automatically
     • Auto-saves IDs for next requests

  ✅ Smart Variables
     • user_id, document_id auto-saved
     • Environment-based configuration
     • Easy switching between environments

  ✅ Integration Tests
     • Full flow examples
     • User → Document communication tests
     • Microservices validation

  ✅ Multiple Testing Options
     • Postman GUI
     • cURL commands
     • Bash scripts
     • PowerShell scripts

  ✅ Comprehensive Documentation
     • Step-by-step guides
     • Troubleshooting section
     • Quick reference cheat sheet
     • Navigation index


┌────────────────────────────────────────────────────────────────────────────┐
│  🧪 TESTING WORKFLOW                                                       │
└────────────────────────────────────────────────────────────────────────────┘

    1️⃣  CREATE USER
        ↓
        POST /users
        └─→ Returns user_id (auto-saved)

    2️⃣  CREATE DOCUMENT FOR USER
        ↓
        POST /users/{user_id}/documents
        └─→ Returns document_id (auto-saved)

    3️⃣  VERIFY COMMUNICATION
        ↓
        User Service → Document Service
        └─→ RestClient validates communication


┌────────────────────────────────────────────────────────────────────────────┐
│  📊 COLLECTION STRUCTURE                                                   │
└────────────────────────────────────────────────────────────────────────────┘

    📁 DocChain Microservices Collection
    │
    ├── 📂 User Service (Port 8081)
    │   ├── 📄 Create User
    │   └── 📄 Create Document for User
    │
    ├── 📂 Document Service (Port 8082)
    │   └── 📄 Create Document (Direct)
    │
    ├── 📂 Integration Examples
    │   ├── 📂 Full Flow - Create User and Document
    │   │   ├── 📄 Step 1 - Create User
    │   │   └── 📄 Step 2 - Create Document via User Service
    │   └── 📄 Microservices Communication Test
    │
    └── 📂 Health Checks
        ├── 📄 User Service Health
        ├── 📄 Document Service Health
        └── 📄 Eureka Discovery Status


┌────────────────────────────────────────────────────────────────────────────┐
│  🔧 ENVIRONMENT VARIABLES                                                  │
└────────────────────────────────────────────────────────────────────────────┘

    Variable                 Value                          Auto-saved
    ────────────────────────────────────────────────────────────────────
    user_service_url         http://localhost:8081          No
    document_service_url     http://localhost:8082          No
    eureka_url               http://localhost:8761          No
    user_id                  (empty)                        Yes ✅
    document_id              (empty)                        Yes ✅
    integration_user_id      (empty)                        Yes ✅


┌────────────────────────────────────────────────────────────────────────────┐
│  📖 DOCUMENTATION GUIDE                                                    │
└────────────────────────────────────────────────────────────────────────────┘

    🎯 START HERE
       └─→ DOCUMENTATION_INDEX.md (Navigation guide)

    📚 MAIN DOCUMENTS

       README_API_TESTS.md
       • Overview & getting started
       • Architecture diagrams
       • Use cases & examples
       • [~40 pages, 10 min read]

       POSTMAN_GUIDE.md
       • Complete Postman guide
       • Detailed examples
       • Troubleshooting
       • [~60 pages, 20 min read]

       CURL_EXAMPLES.md
       • cURL commands
       • Automation scripts
       • Performance testing
       • [~35 pages, 15 min read]

       API_QUICK_REFERENCE.md
       • Cheat sheet
       • Quick commands
       • Common errors
       • [~15 pages, 2 min read]


┌────────────────────────────────────────────────────────────────────────────┐
│  🎓 LEARNING PATH                                                          │
└────────────────────────────────────────────────────────────────────────────┘

    BEGINNER
    ━━━━━━━━
      1. Read README_API_TESTS.md → Quick Start
      2. Import Postman collection
      3. Run "Create User" example
      4. Try "Create Document for User"

    INTERMEDIATE
    ━━━━━━━━━━━━
      1. Complete all examples in POSTMAN_GUIDE.md
      2. Run integration flows
      3. Try cURL examples
      4. Understand microservices communication

    ADVANCED
    ━━━━━━━━
      1. Create custom test scripts
      2. Set up automated testing
      3. Implement load testing
      4. Configure CI/CD pipeline


┌────────────────────────────────────────────────────────────────────────────┐
│  ⚡ PRO TIPS                                                               │
└────────────────────────────────────────────────────────────────────────────┘

    💡 Use Postman Console (View → Show Postman Console)
       → See detailed logs of each request

    💡 Variables are auto-saved after each successful request
       → No need to copy/paste IDs manually

    💡 Each request has test scripts
       → Run them to validate responses automatically

    💡 Use Collection Runner for batch testing
       → Test multiple scenarios at once

    💡 Check the "Tests" tab in each request
       → Learn how tests are structured

    💡 Response examples show both success and errors
       → Useful for understanding edge cases


┌────────────────────────────────────────────────────────────────────────────┐
│  🐛 TROUBLESHOOTING                                                        │
└────────────────────────────────────────────────────────────────────────────┘

    ❌ Connection Refused
       → Check if services are running: curl http://localhost:8081/actuator/health

    ❌ User not found
       → Create user first, verify user_id is saved in variables

    ❌ Owner ID must be set
       → Add "ownerId" field when creating documents directly

    ❌ Validation failed
       → Ensure all required fields are present and not empty

    📖 Full Troubleshooting: POSTMAN_GUIDE.md → Troubleshooting


┌────────────────────────────────────────────────────────────────────────────┐
│  ✅ PRE-FLIGHT CHECKLIST                                                   │
└────────────────────────────────────────────────────────────────────────────┘

    Before testing, ensure:

    □ PostgreSQL running (ports 5432, 5433)
    □ Discovery Service running (port 8761)
    □ Document Service running (port 8082)
    □ User Service running (port 8081)
    □ Postman collection imported (or cURL ready)
    □ Environment variables configured/selected

    Quick verify:
    curl http://localhost:8081/actuator/health
    curl http://localhost:8082/actuator/health


┌────────────────────────────────────────────────────────────────────────────┐
│  📞 SUPPORT                                                                │
└────────────────────────────────────────────────────────────────────────────┘

    🔍 Can't find something?
       → Check DOCUMENTATION_INDEX.md for navigation

    🐛 Having issues?
       → Check POSTMAN_GUIDE.md → Troubleshooting
       → Check API_QUICK_REFERENCE.md → Common Errors

    📚 Need detailed info?
       → README_API_TESTS.md for overview
       → POSTMAN_GUIDE.md for Postman details
       → CURL_EXAMPLES.md for automation


┌────────────────────────────────────────────────────────────────────────────┐
│  🎯 WHAT'S INCLUDED                                                        │
└────────────────────────────────────────────────────────────────────────────┘

    ✅ 2 Postman files (collection + environment)
    ✅ 5 documentation files (150+ pages total)
    ✅ 8 endpoints fully documented
    ✅ 15+ test cases with automation
    ✅ 30+ request/response examples
    ✅ 50+ code examples (cURL, Bash, PowerShell)
    ✅ 6+ automation scripts
    ✅ Complete integration flow examples
    ✅ Troubleshooting guides
    ✅ Quick reference cheat sheets


┌────────────────────────────────────────────────────────────────────────────┐
│  🚀 NEXT STEPS                                                             │
└────────────────────────────────────────────────────────────────────────────┘

    1. Choose your tool: Postman or cURL
    2. Import the collection (if Postman)
    3. Start all services
    4. Run health checks
    5. Create your first user
    6. Create a document for that user
    7. Explore other endpoints
    8. Run integration tests


╔════════════════════════════════════════════════════════════════════════════╗
║                                                                            ║
║                          🎉 READY TO START!                                ║
║                                                                            ║
║                Open DOCUMENTATION_INDEX.md to begin                        ║
║                                                                            ║
╚════════════════════════════════════════════════════════════════════════════╝


─────────────────────────────────────────────────────────────────────────────

  Version: 1.0.0
  Date: October 2025
  Project: DocChain Microservices
  Tech Stack: Spring Boot 3.5.6 | Java 21 | PostgreSQL 16

─────────────────────────────────────────────────────────────────────────────

  📧 Contact: DocChain Team
  📚 Docs: /docchain/*.md
  🔗 Collection: docchain-collection.postman_collection.json

─────────────────────────────────────────────────────────────────────────────


server:
    port: 8080

spring:
  application:
    name: user-service
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: false
  datasource:
    url: jdbc:postgresql://localhost:5432/userdb
    username: postgres
    password: postgres
  graphql:
    graphiql:
      enabled: true
    path: /graphql
  cache:
    type: redis
  data:
    redis:
      host: localhost
      port: 6379

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    instance-id: ${random.value}
    prefer-ip-address: true

document:
  service:
    url: lb://document-service

resilience4j:
  retry:
    configs:
      default:
        max-attempts: 2
        wait-duration: 5000ms
        enable-exponential-backoff: false
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - org.springframework.web.client.ResourceAccessException
          - java.net.ConnectException                               # falha de conexão
          - java.net.SocketTimeoutException                         # socket timeout
          - java.lang.IllegalStateException                         # loadBalancer sem instâncias
        ignore-exceptions:
          - org.springframework.web.client.HttpClientErrorException  # 4xx - erro do cliente
          - com.docchain.user.domain.exception.UserNotFoundException # erro de negócio
          - java.util.concurrent.TimeoutException                    # Não fazer retry em timeout (IA já demorou)
    instances:
      documentService:
        base-config: default

  circuitbreaker:
    configs:
      default:
        sliding-window-type: COUNT_BASED
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 15s             # Aumentado para 15s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        record-exceptions:
          - org.springframework.web.client.HttpServerErrorException  # 5xx - erro do servidor
          - org.springframework.web.client.ResourceAccessException   # timeout, conexão
          - java.util.concurrent.TimeoutException                    # timeout geral
          - java.io.IOException                                       # IO error
          - java.lang.IllegalStateException                          # loadBalancer sem instancias
    instances:
      documentService:
        base-config: default
        wait-duration-in-open-state: 15s

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,circuitbreakers,circuitbreakerevents,retries,retryevents
  metrics:
    tags:
      application: ${spring.application.name}
  health:
    circuitbreakers:
      enabled: true
  endpoint:
    health:
      show-details: always